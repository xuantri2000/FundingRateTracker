// funding-rate-backend/services/exchangeHandlers/whitebitHandler.js
import axios from 'axios';
import crypto from 'crypto';
import { MODE, EXCHANGES, getCredentials } from '../config.js';

const CONFIG = EXCHANGES.whitebit;
// Lu√¥n d√πng production URL v√¨ kh√¥ng c√≥ testnet Futures
const BASE_URL = CONFIG.urls.production;

// Cache ƒë·ªÉ l∆∞u th√¥ng tin futures markets
let futuresInfoCache = null;

async function _getFuturesInfo() {
  if (futuresInfoCache) return futuresInfoCache;
  try {
    console.log('‚è≥ [WhiteBIT] Fetching futures markets info...');
    // Endpoint public ƒë·ªÉ l·∫•y th√¥ng tin c√°c c·∫∑p futures
    const { data } = await axios.get(`${BASE_URL}/api/v4/public/futures`);
    // ‚úÖ API tr·∫£ v·ªÅ { success: true, message: null, result: [...] }
    if (data.success && Array.isArray(data.result)) {
      futuresInfoCache = data.result;
      console.log(`‚úÖ [WhiteBIT] Futures markets info cached: ${futuresInfoCache.length} markets`);
      return futuresInfoCache;
    } else {
      throw new Error('Invalid futures API response format');
    }
  } catch (error) {
    console.error('‚ùå [WhiteBIT] Error fetching futures info:', error.response?.data || error.message);
    throw new Error('Could not fetch WhiteBIT futures info.');
  }
}

/**
 * G·ª≠i request c√≥ ch·ªØ k√Ω ƒë·∫øn WhiteBIT API V4
 * @param {string} requestPath - ƒê∆∞·ªùng d·∫´n API, v√≠ d·ª•: /api/v4/collateral-account/balance
 * @param {string} method - 'POST', 'GET', ho·∫∑c 'DELETE'
 * @param {object} payload - D·ªØ li·ªáu body
 * @returns {Promise<any>} - D·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ WhiteBIT
 */
async function _signedRequest(requestPath, method = 'POST', payload = {}) {
  const credentials = getCredentials('whitebit');
  const apiKey = credentials.apiKey;
  const apiSecret = credentials.secretKey;

  // ‚úÖ B·∫ÆT BU·ªòC: WhiteBIT y√™u c·∫ßu tr∆∞·ªùng request + nonce trong body
  if (!payload.request) {
    payload.request = requestPath;
  }
  if (!payload.nonce) {
    payload.nonce = Date.now();
  }

  // Chu·∫©n b·ªã payload v√† k√Ω HMAC SHA512
  const payloadJSON = JSON.stringify(payload);
  const payloadBase64 = Buffer.from(payloadJSON).toString('base64');

  const signature = crypto
    .createHmac('sha512', apiSecret)
    .update(payloadBase64)
    .digest('hex');

  const headers = {
    'Content-Type': 'application/json',
    'X-TXC-APIKEY': apiKey,
    'X-TXC-PAYLOAD': payloadBase64,
    'X-TXC-SIGNATURE': signature,
  };

  const url = `${BASE_URL}${requestPath}`;

  try {
    let response;
    switch (method.toUpperCase()) {
      case 'POST':
        response = await axios.post(url, payload, { headers });
        break;
      case 'GET':
        response = await axios.get(url, { headers });
        break;
      case 'DELETE':
        response = await axios.delete(url, { headers, data: payload });
        break;
      default:
        throw new Error(`Unsupported HTTP method: ${method}`);
    }

    // WhiteBIT c√≥ th·ªÉ tr·∫£ l·ªói trong body d√π HTTP 200
    if (response.data && (response.data.code !== undefined && response.data.code !== 0)) {
      throw new Error(
        `WhiteBIT API Error (${response.data.code}): ${
          JSON.stringify(response.data.errors || response.data.message)
        }`
      );
    }

    return response.data;
  } catch (error) {
    const errorData = error.response?.data;
    const errorMessage = errorData ? JSON.stringify(errorData) : error.message;
    console.error(`‚ùå [WhiteBIT] Error ${method} ${requestPath}:`, errorMessage);
    throw new Error(`WhiteBIT API Error: ${errorMessage}`);
  }
}

// Helper ƒë·ªÉ format symbol cho WhiteBIT (v√≠ d·ª•: BTCUSDT -> BTC_PERP)
function formatSymbolWB(symbol) {
   if (!symbol.endsWith('USDT')) {
      throw new Error(`[WhiteBIT] Invalid symbol format: ${symbol}. Must end with USDT.`);
   }
   // WhiteBIT d√πng ticker_id: BTC_PERP cho futures perpetual
   return symbol.replace('USDT', '_PERP');
}

// ============================================
// WHITEBIT HANDLER
// ============================================
export const whitebitHandler = {

  // OK (Public)
  async getPrice(symbol) {
    try {
      const tickerId = formatSymbolWB(symbol);
      // ‚úÖ L·∫•y t·ª´ futures API v√¨ ticker ch·ªâ c√≥ spot
      const info = await _getFuturesInfo();
      const marketData = info.find(m => m.ticker_id === tickerId);
      
      if (!marketData || !marketData.last_price) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y c·∫∑p giao d·ªãch ${tickerId} tr√™n WhiteBIT.`);
      }
      return parseFloat(marketData.last_price);
    } catch (error) {
      console.error(`‚ùå [WhiteBIT] Error getPrice ${symbol}:`, error.message);
      throw new Error(`WhiteBIT API Error: ${error.message}`);
    }
  },

  // OK (Public)
  async getSymbolInfo(symbol) {
    const tickerId = formatSymbolWB(symbol);
    const info = await _getFuturesInfo();
    // ‚úÖ T√¨m trong array d·ª±a tr√™n ticker_id
    const symbolInfo = info.find(item => item.ticker_id === tickerId);

    if (!symbolInfo) {
      throw new Error(`[WhiteBIT] Symbol info not found for ${tickerId}`);
    }
    
    // WhiteBIT futures kh√¥ng c√≥ amount_step trong response, d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh
    // D·ª±a v√†o stock_currency ƒë·ªÉ x√°c ƒë·ªãnh precision
    const precision = symbolInfo.stock_currency === 'BTC' ? 3 : 2;
    const maxLeverage = parseInt(symbolInfo.max_leverage) || 100;

    return {
      quantityPrecision: precision,
      maxLeverage: maxLeverage,
    };
  },

  // C·∫ßn API Key (Private)
  async getPNL(symbol) {
    const tickerId = formatSymbolWB(symbol);
    const payload = { 
      market: tickerId,
      request: '/api/v4/collateral-account/positions/open',
      nonce: Date.now()
    };
    try {
      // ‚úÖ Endpoint ƒë√∫ng cho collateral/futures positions
      const positions = await _signedRequest('/api/v4/collateral-account/positions/open', 'POST', payload);
      
      // API tr·∫£ v·ªÅ m·∫£ng, t√¨m v·ªã th·∫ø kh·ªõp
      const position = Array.isArray(positions) 
        ? positions.find(p => p.market === tickerId) 
        : null;

      return {
        // WhiteBIT d√πng 'pnl' cho unrealized PNL
        pnl: position ? parseFloat(position.pnl) : 0,
        // WhiteBIT d√πng 'amount' cho size
        size: position ? parseFloat(position.amount) : 0,
        // WhiteBIT c√≥ pnlPercent
        roi: position ? parseFloat(position.pnlPercent) : 0,
		isolatedMargin: position ? parseFloat(position.margin) : 0,
      };
    } catch (error) {
       // N·∫øu l·ªói l√† "position not found", tr·∫£ v·ªÅ 0
       if (error.message.toLowerCase().includes('position not found') || 
           error.message.toLowerCase().includes('no positions')) {
          console.log(`   ‚ìò [WhiteBIT] No position found for ${tickerId}.`);
          return { pnl: 0, size: 0, roi: 0 };
       }
       // N·∫øu l·ªói kh√°c, n√©m l·∫°i l·ªói
       throw error;
    }
  },

  // C·∫ßn API Key (Private)
  async getAllPositions() {
    try {
      // ‚úÖ Endpoint ƒë√∫ng, payload ch·ªâ c·∫ßn request v√† nonce
      const payload = {
        request: '/api/v4/collateral-account/positions/open',
        nonce: Date.now()
      };
      const positions = await _signedRequest('/api/v4/collateral-account/positions/open', 'POST', payload);
      // API tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ v·ªã th·∫ø
      return Array.isArray(positions) ? positions : [];
    } catch (error) {
       // N·∫øu l·ªói l√† "position not found", tr·∫£ v·ªÅ m·∫£ng r·ªóng
       if (error.message.toLowerCase().includes('position not found') || 
           error.message.toLowerCase().includes('no positions')) {
          console.log(`   ‚ìò [WhiteBIT] No open positions found.`);
          return [];
       }
       // N·∫øu l·ªói kh√°c, n√©m l·∫°i l·ªói
       throw error;
    }
  },

   // WhiteBIT ch·ªâ h·ªó tr·ª£ Isolated Margin cho Futures V4
  async setMarginType(symbol, marginType) {
    if (marginType.toUpperCase() !== 'ISOLATED') {
      console.warn(`   ‚ö†Ô∏è  [WhiteBIT] Only ISOLATED margin type is supported for V4 Futures. Request to set ${marginType} ignored.`);
    } else {
      console.log(`   ‚ìò [WhiteBIT] Futures V4 is ISOLATED by default. No action needed for ${symbol}.`);
    }
    return; // Kh√¥ng c·∫ßn l√†m g√¨
  },

  // C·∫ßn API Key (Private)
  async setLeverage(symbol, leverage) {
    const tickerId = formatSymbolWB(symbol);
    const payload = {
      leverage: leverage, // ‚úÖ G·ª≠i d·∫°ng s·ªë, kh√¥ng c·∫ßn toString
      request: '/api/v4/collateral-account/leverage',
      nonce: Date.now()
    };
    console.log(`   ‚ö°Ô∏è [WhiteBIT] Setting Leverage for account to ${leverage}x`);
    // ‚úÖ Endpoint ƒë√∫ng - leverage √°p d·ª•ng cho to√†n b·ªô collateral account
    const result = await _signedRequest('/api/v4/collateral-account/leverage', 'POST', payload);
    return { message: `Leverage set to ${leverage}x for collateral account` };
  },

  // C·∫ßn API Key (Private)
  async placeOrder(symbol, side, quantity) {
    const tickerId = formatSymbolWB(symbol);
    const payload = {
      market: tickerId,
      side: side.toLowerCase(), // 'buy' ho·∫∑c 'sell'
      amount: quantity.toString(),
      request: '/api/v4/order/collateral/market',
      nonce: Date.now()
    };
    console.log(`   üõí [WhiteBIT] Placing MARKET ${side} order for ${quantity} ${tickerId}`);
    // ‚úÖ Endpoint ƒë√∫ng cho collateral/futures market order
    const data = await _signedRequest('/api/v4/order/collateral/market', 'POST', payload);
    // Tr·∫£ v·ªÅ ID l·ªánh
    return { orderId: data?.orderId || 'N/A' };
  },

  // C·∫ßn API Key (Private)
  async cancelAllOpenOrders(symbol) {
    const tickerId = formatSymbolWB(symbol);
    console.log(`   -> [WhiteBIT] Cancelling all open orders for ${tickerId}`);
    const payload = {
      market: tickerId,
      type: ["Futures"], // ‚úÖ Ch·ªâ cancel futures orders
      request: '/api/v4/order/cancel/all',
      nonce: Date.now()
    };
    try {
      // ‚úÖ Endpoint ƒë√∫ng - POST method
      await _signedRequest('/api/v4/order/cancel/all', 'POST', payload);
      console.log(`   ‚úÖ [WhiteBIT] Successfully cancelled open orders for ${tickerId}.`);
    } catch (error) {
       // B·ªè qua n·∫øu kh√¥ng c√≥ l·ªánh ƒë·ªÉ cancel
       console.log(`   ‚ìò [WhiteBIT] No open orders to cancel or already cancelled for ${tickerId}.`);
    }
  },

  // C·∫ßn API Key (Private)
  async closePosition(symbol) {
    console.log(`   -> [WhiteBIT] Starting full closure process for ${symbol}...`);
    const tickerId = formatSymbolWB(symbol);

    // B∆∞·ªõc 1: H·ªßy t·∫•t c·∫£ c√°c l·ªánh ƒëang m·ªü (limit, stop...)
    await this.cancelAllOpenOrders(symbol);

    // B∆∞·ªõc 2: L·∫•y th√¥ng tin v·ªã th·∫ø hi·ªán t·∫°i
    const currentPositionInfo = await this.getPNL(symbol);

    if (!currentPositionInfo || currentPositionInfo.size === 0) {
      console.log(`   ‚úÖ [WhiteBIT] No open position found for ${tickerId}.`);
      return { message: `No open position for ${tickerId}` };
    }

    const positionSize = currentPositionInfo.size;
    
    // B∆∞·ªõc 3: L·∫•y l·∫°i th√¥ng tin ƒë·∫ßy ƒë·ªß ƒë·ªÉ x√°c ƒë·ªãnh side
    let positionSide = '';
    try {
       const payload = {
          market: tickerId,
          request: '/api/v4/collateral-account/positions/open',
          nonce: Date.now()
       };
       const positions = await _signedRequest('/api/v4/collateral-account/positions/open', 'POST', payload);
       const position = Array.isArray(positions) 
         ? positions.find(p => p.market === tickerId) 
         : null;
       
       if (position) {
          // ‚úÖ X√°c ƒë·ªãnh side d·ª±a tr√™n amount: d∆∞∆°ng = long, √¢m = short
          positionSide = parseFloat(position.amount) > 0 ? 'long' : 'short';
       }
    } catch (e) {
       throw new Error(`[WhiteBIT] Could not determine position side for ${tickerId}: ${e.message}`);
    }

    if (!positionSide) {
       throw new Error(`[WhiteBIT] Could not determine position side for active position ${tickerId}`);
    }

    const closeSide = positionSide.toLowerCase() === 'long' ? 'sell' : 'buy';
    const quantityToClose = Math.abs(positionSize);

    console.log(`   -> [WhiteBIT] Closing ${quantityToClose} of ${tickerId} with side ${closeSide}`);
    
    // B∆∞·ªõc 4: ƒê·∫∑t l·ªánh Market ng∆∞·ª£c h∆∞·ªõng ƒë·ªÉ ƒë√≥ng v·ªã th·∫ø
    const payload = {
      market: tickerId,
      side: closeSide,
      amount: quantityToClose.toString(),
      request: '/api/v4/order/collateral/market',
      nonce: Date.now()
    };
    const data = await _signedRequest('/api/v4/order/collateral/market', 'POST', payload);
    console.log(`   ‚úÖ [WhiteBIT] Close order placed for ${tickerId}.`);
    return { orderId: data?.orderId || 'N/A' };
  }
};