import express from 'express';
import exchangeHandlers from '../services/exchangeHandlers/index.js';
import { hasCredentials } from '../services/config.js';

const router = express.Router();

router.post('/multi', async (req, res) => {
	try {
		const { symbol, orders } = req.body;

		// Validate input
		if (!symbol || !orders || !Array.isArray(orders) || orders.length === 0) {
			return res.status(400).json({
				error: 'Invalid request',
				message: 'Symbol and orders array are required'
			});
		}

		console.log(`\nüöÄ Processing ${orders.length} orders for ${symbol}`);

		// X·ª≠ l√Ω t·∫•t c·∫£ orders song song
		const results = await Promise.allSettled(
			orders.map(order => processOrder(symbol, order))
		);

		// Format k·∫øt qu·∫£
		const response = results.map((result, index) => {
			const order = orders[index];

			if (result.status === 'fulfilled') {
				return {
					exchange: order.exchange,
					side: order.side,
					success: true,
					data: result.value
				};
			} else {
				// Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói r√µ r√†ng h∆°n t·ª´ handler
				return {
					exchange: order.exchange,
					side: order.side,
					success: false,
					error: result.reason.message || 'Unknown error'
				};
			}
		});

		// Log summary
		const successCount = response.filter(r => r.success).length;
		console.log(`‚úÖ ${successCount}/${orders.length} orders placed successfully\n`);

		res.json({
			symbol,
			results: response,
			summary: {
				total: orders.length,
				success: successCount,
				failed: orders.length - successCount
			}
		});

	} catch (error) {
		console.error('‚ùå Error in multi order:', error);
		res.status(500).json({
			error: 'Internal server error',
			message: error.message
		});
	}
});

// X·ª≠ l√Ω t·ª´ng order
async function processOrder(symbol, order) {
	const { exchange, side, leverage, amount } = order;

	console.log(`üìä [${exchange}] ${side} ${symbol} - Leverage: ${leverage}x, Amount: ${amount} USDT`);

	// Ki·ªÉm tra exchange c√≥ handler kh√¥ng
	const handler = exchangeHandlers[exchange];
	if (!handler) {
		throw new Error(`Exchange "${exchange}" is not supported`);
	}

	// Ki·ªÉm tra credentials (s·ª≠ d·ª•ng h√†m t·ª´ config)
	if (!hasCredentials(exchange)) {
		throw new Error(`Missing API credentials for ${exchange}`);
	}

	// 1. L·∫•y gi√° hi·ªán t·∫°i
	const price = await handler.getPrice(symbol);
	console.log(`   üí∞ Current price: $${price}`);

	// 2. T√≠nh quantity
	const quantity = calculateQuantity(amount, price, leverage);
	console.log(`   üì¶ Quantity: ${quantity}`);

	// 3. SET MARGIN TYPE (B∆Ø·ªöC M·ªöI)
	// Lu√¥n ƒë·∫∑t l√† ISOLATED theo y√™u c·∫ßu c·ªßa b·∫°n
	await handler.setMarginType(symbol, 'ISOLATED');

	// 4. Set leverage (B∆∞·ªõc c≈©)
	await handler.setLeverage(symbol, leverage);
	console.log(`   ‚ö° Leverage set: ${leverage}x`);

	// 5. Place order (B∆∞·ªõc c≈©)
	const result = await handler.placeOrder(symbol, side, quantity);
	console.log(`   ‚úÖ Order placed: ${result.orderId || 'OK'}`);

	return {
		price,
		quantity,
		leverage,
		orderId: result.orderId,
		timestamp: new Date().toISOString()
	};
}

	// T√≠nh quantity d·ª±a tr√™n amount v√† gi√°
	function calculateQuantity(amount, price, leverage) {
		// Quantity = (Amount * Leverage) / Price
		const qty = (amount * leverage) / price;
		// L√†m tr√≤n ƒë·∫øn 3 ch·ªØ s·ªë th·∫≠p ph√¢n
		return parseFloat(qty.toFixed(3));
	}

export default router;