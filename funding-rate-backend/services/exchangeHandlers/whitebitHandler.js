// funding-rate-backend/services/exchangeHandlers/whitebitHandler.js
import axios from 'axios';
import crypto from 'crypto';
import { MODE, EXCHANGES, getCredentials } from '../config.js';

const CONFIG = EXCHANGES.whitebit;
// Lu√¥n d√πng production URL v√¨ kh√¥ng c√≥ testnet Futures
const BASE_URL = CONFIG.urls.production;

// Cache ƒë·ªÉ l∆∞u th√¥ng tin futures markets
let futuresInfoCache = null;

async function _getFuturesInfo() {
  if (futuresInfoCache) return futuresInfoCache;
  try {
    console.log('‚è≥ [WhiteBIT] Fetching futures markets info...');
    // Endpoint public ƒë·ªÉ l·∫•y th√¥ng tin c√°c c·∫∑p futures
    const { data } = await axios.get(`${BASE_URL}/api/v4/public/futures`);
    // API tr·∫£ v·ªÅ m·ªôt object v·ªõi key l√† ticker_id (vd: "BTC_PERP")
    futuresInfoCache = data;
    console.log('‚úÖ [WhiteBIT] Futures markets info cached.');
    return futuresInfoCache;
  } catch (error) {
    console.error('‚ùå [WhiteBIT] Error fetching futures info:', error.response?.data || error.message);
    throw new Error('Could not fetch WhiteBIT futures info.');
  }
}

/**
 * H√†m n·ªôi b·ªô ƒë·ªÉ t·∫°o v√† g·ª≠i request c√≥ ch·ªØ k√Ω ƒë·∫øn WhiteBIT V4
 * @param {string} requestPath - Eg. /api/v4/trade-account/positions
 * @param {string} method - 'GET' ho·∫∑c 'POST'
 * @param {object} payload - Body c·ªßa request (ngay c·∫£ v·ªõi GET)
 * @returns {Promise<any>} - D·ªØ li·ªáu data t·ª´ response c·ªßa axios
 */
async function _signedRequest(requestPath, method = 'POST', payload = {}) {
   // WhiteBIT ch·ªâ ho·∫°t ƒë·ªông ·ªü production mode cho API private
   if (MODE !== 'production') {
      throw new Error("WhiteBIT private API calls only work in 'production' mode.");
   }

  const credentials = getCredentials('whitebit');
  const apiKey = credentials.apiKey;
  const apiSecret = credentials.secretKey;

  // Chu·∫©n b·ªã payload v√† headers theo y√™u c·∫ßu c·ªßa WhiteBIT V4
  const payloadJSON = JSON.stringify(payload);
  const payloadBase64 = Buffer.from(payloadJSON).toString('base64');

  const signature = crypto
    .createHmac('sha256', apiSecret)
    .update(payloadBase64)
    .digest('hex');

  const headers = {
    'Content-Type': 'application/json',
    'X-TXC-APIKEY': apiKey,
    'X-TXC-PAYLOAD': payloadBase64,
    'X-TXC-SIGNATURE': signature,
  };

  const url = `${BASE_URL}${requestPath}`;

  try {
    let response;
    // WhiteBIT V4 d√πng POST cho c·∫£ vi·ªác l·∫•y d·ªØ li·ªáu (nh∆∞ positions)
    if (method.toUpperCase() === 'POST') {
      response = await axios.post(url, payload, { headers });
    } else if (method.toUpperCase() === 'GET') {
       // M·ªôt s·ªë endpoint ƒë·∫∑c bi·ªát c√≥ th·ªÉ l√† GET, d√π √≠t g·∫∑p h∆°n cho private
       // L∆∞u √Ω: Payload v·∫´n c·∫ßn ƒë·ªÉ t·∫°o signature, nh∆∞ng kh√¥ng g·ª≠i trong body GET
       response = await axios.get(url, { headers });
    } else if (method.toUpperCase() === 'DELETE') {
       // X·ª≠ l√Ω DELETE n·∫øu c·∫ßn (v√≠ d·ª•: h·ªßy l·ªánh)
       response = await axios.delete(url, { headers, data: payload }); // Payload c√≥ th·ªÉ c·∫ßn trong data cho DELETE
    }
     else {
      throw new Error(`Unsupported method: ${method}`);
    }

    // WhiteBIT tr·∫£ v·ªÅ 200 OK ngay c·∫£ khi c√≥ l·ªói logic, c·∫ßn check response body
    // C·∫ßn ki·ªÉm tra c·∫•u tr√∫c response th√†nh c√¥ng c·ªßa t·ª´ng endpoint c·ª• th·ªÉ
    // V√≠ d·ª•, nhi·ªÅu endpoint tr·∫£ v·ªÅ l·ªói tr·ª±c ti·∫øp trong data object
    if (response.data && (response.data.code !== undefined && response.data.code !== 0)) {
       throw new Error(`WhiteBIT API Error (${response.data.code}): ${JSON.stringify(response.data.errors || response.data.message)}`);
    }
    // M·ªôt s·ªë endpoint (nh∆∞ l·∫•y positions) tr·∫£ v·ªÅ m·∫£ng tr·ª±c ti·∫øp khi th√†nh c√¥ng
    return response.data;

  } catch (error) {
    const errorData = error.response?.data;
    const errorMessage = errorData ? JSON.stringify(errorData) : error.message;
    console.error(`‚ùå [WhiteBIT] Error ${method} ${requestPath}:`, errorMessage);
    // N√©m l·ªói v·ªõi th√¥ng b√°o t·ª´ s√†n
    throw new Error(`WhiteBIT API Error: ${errorMessage}`);
  }
}

// Helper ƒë·ªÉ format symbol cho WhiteBIT (v√≠ d·ª•: BTCUSDT -> BTC_PERP)
function formatSymbolWB(symbol) {
   if (!symbol.endsWith('USDT')) {
      throw new Error(`[WhiteBIT] Invalid symbol format: ${symbol}. Must end with USDT.`);
   }
   return symbol.replace('USDT', '_PERP');
}

// ============================================
// WHITEBIT HANDLER
// ============================================
export const whitebitHandler = {

  // OK (Public)
  async getPrice(symbol) {
    try {
      const tickerId = formatSymbolWB(symbol);
      const { data } = await axios.get(`${BASE_URL}/api/v4/public/ticker`); // L·∫•y t·∫•t c·∫£ ticker
      const marketData = data[tickerId];
      if (!marketData || !marketData.last_price) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y c·∫∑p giao d·ªãch ${tickerId} tr√™n WhiteBIT.`);
      }
      return parseFloat(marketData.last_price);
    } catch (error) {
      console.error(`‚ùå [WhiteBIT] Error getPrice ${symbol}:`, error.response?.data || error.message);
      throw new Error(`WhiteBIT API Error: ${error.response?.data || error.message}`);
    }
  },

  // OK (Public)
  async getSymbolInfo(symbol) {
    const tickerId = formatSymbolWB(symbol);
    const info = await _getFuturesInfo();
    const symbolInfo = info ? info[tickerId] : null;

    if (!symbolInfo) {
      throw new Error(`[WhiteBIT] Symbol info not found for ${tickerId}`);
    }
    // WhiteBIT d√πng amount_step ƒë·ªÉ x√°c ƒë·ªãnh ƒë·ªô ch√≠nh x√°c quantity
    const step = parseFloat(symbolInfo.amount_step);
    const precision = step > 0 ? (step.toString().split('.')[1] || '').length : 0;
    // ƒê√≤n b·∫©y t·ªëi ƒëa
    const maxLeverage = parseFloat(symbolInfo.max_leverage);

    return {
      quantityPrecision: precision,
      maxLeverage: maxLeverage || 20, // Fallback
    };
  },

  // C·∫ßn API Key (Private)
  async getPNL(symbol) {
    const tickerId = formatSymbolWB(symbol);
    const payload = { market: tickerId };
    try {
      // Endpoint l·∫•y v·ªã th·∫ø theo market c·ª• th·ªÉ
      const positions = await _signedRequest('/api/v4/trade-account/positions', 'POST', payload);
      // API tr·∫£ v·ªÅ m·∫£ng, t√¨m v·ªã th·∫ø kh·ªõp
      const position = positions.find(p => p.market === tickerId);

      return {
        // WhiteBIT d√πng 'unrealized_pnl'
        pnl: position ? parseFloat(position.unrealized_pnl) : 0,
        // WhiteBIT d√πng 'amount' cho size
        size: position ? parseFloat(position.amount) : 0,
        // WhiteBIT kh√¥ng tr·∫£ v·ªÅ ROI tr·ª±c ti·∫øp, c√≥ th·ªÉ t·ª± t√≠nh n·∫øu c·∫ßn
        // roi: position ? calculateROI(position) : 0
      };
    } catch (error) {
       // N·∫øu l·ªói l√† "position not found", tr·∫£ v·ªÅ 0
       if (error.message.toLowerCase().includes('position not found')) {
          console.log(`   ‚ìò [WhiteBIT] No position found for ${tickerId}.`);
          return { pnl: 0, size: 0, roi: 0 };
       }
       // N·∫øu l·ªói kh√°c, n√©m l·∫°i l·ªói
       throw error;
    }
  },

   // WhiteBIT ch·ªâ h·ªó tr·ª£ Isolated Margin cho Futures V4
  async setMarginType(symbol, marginType) {
    if (marginType.toUpperCase() !== 'ISOLATED') {
      console.warn(`   ‚ö†Ô∏è  [WhiteBIT] Only ISOLATED margin type is supported for V4 Futures. Request to set ${marginType} ignored.`);
    } else {
      console.log(`   ‚ìò [WhiteBIT] Futures V4 is ISOLATED by default. No action needed for ${symbol}.`);
    }
    return; // Kh√¥ng c·∫ßn l√†m g√¨
  },

  // C·∫ßn API Key (Private)
  async setLeverage(symbol, leverage) {
    const tickerId = formatSymbolWB(symbol);
    const payload = {
      market: tickerId,
      leverage: leverage.toString(),
    };
    console.log(`   ‚ö°Ô∏è [WhiteBIT] Setting Leverage for ${tickerId} to ${leverage}x`);
    // Endpoint ƒë·ªÉ set leverage
    await _signedRequest('/api/v4/trade-account/leverage', 'POST', payload);
    // WhiteBIT kh√¥ng tr·∫£ v·ªÅ g√¨ nhi·ªÅu khi th√†nh c√¥ng, ch·ªâ c·∫ßn kh√¥ng c√≥ l·ªói l√† ƒë∆∞·ª£c
    return { message: `Leverage set to ${leverage}x for ${tickerId}` };
  },

  // C·∫ßn API Key (Private)
  async placeOrder(symbol, side, quantity) {
    const tickerId = formatSymbolWB(symbol);
    const payload = {
      market: tickerId,
      side: side.toLowerCase(), // 'buy' ho·∫∑c 'sell'
      amount: quantity.toString(),
      // WhiteBIT d√πng endpoint ri√™ng cho market order
    };
    console.log(`   üõí [WhiteBIT] Placing MARKET ${side} order for ${quantity} ${tickerId}`);
    // Endpoint ƒë·ªÉ ƒë·∫∑t l·ªánh market
    const data = await _signedRequest('/api/v4/order/collateral/market', 'POST', payload);
    // Tr·∫£ v·ªÅ ID l·ªánh n·∫øu c√≥ (c·∫•u tr√∫c response c·∫ßn ki·ªÉm tra l·∫°i)
    return { orderId: data?.id || data?.orderId || 'N/A' };
  },

  // C·∫ßn API Key (Private)
  async cancelAllOpenOrders(symbol) {
    const tickerId = formatSymbolWB(symbol);
    console.log(`   -> [WhiteBIT] Cancelling all open orders for ${tickerId}`);
    const payload = {
      market: tickerId
    };
    try {
      // Endpoint ƒë·ªÉ h·ªßy t·∫•t c·∫£ l·ªánh theo market
      // L∆∞u √Ω: Endpoint n√†y c√≥ th·ªÉ y√™u c·∫ßu method DELETE ho·∫∑c POST t√πy t√†i li·ªáu
      await _signedRequest('/api/v4/orders', 'DELETE', payload); // Gi·∫£ s·ª≠ l√† DELETE
      console.log(`   ‚úÖ [WhiteBIT] Successfully cancelled open orders for ${tickerId}.`);
    } catch (error) {
       // Ki·ªÉm tra xem l·ªói c√≥ ph·∫£i l√† "kh√¥ng c√≥ l·ªánh" kh√¥ng, n·∫øu c√≥ th√¨ b·ªè qua
       // C·∫ßn xem m√£ l·ªói c·ª• th·ªÉ WhiteBIT tr·∫£ v·ªÅ cho tr∆∞·ªùng h·ª£p n√†y
       // V√≠ d·ª•: if (error.message.includes('No orders found')) { ... }
       console.log(`   ‚ìò [WhiteBIT] No open orders to cancel or already cancelled for ${tickerId}.`);
       // N·∫øu l·ªói kh√°c, n√©m l·∫°i
       // throw error;
    }
  },

  // C·∫ßn API Key (Private)
  async closePosition(symbol) {
    console.log(`   -> [WhiteBIT] Starting full closure process for ${symbol}...`);
    const tickerId = formatSymbolWB(symbol);

    // B∆∞·ªõc 1: H·ªßy t·∫•t c·∫£ c√°c l·ªánh ƒëang m·ªü (limit, stop...)
    await this.cancelAllOpenOrders(tickerId); // S·ª≠ d·ª•ng tickerId ƒë√£ format

    // B∆∞·ªõc 2: L·∫•y th√¥ng tin v·ªã th·∫ø hi·ªán t·∫°i
    const currentPositionInfo = await this.getPNL(symbol); // getPNL tr·∫£ v·ªÅ { pnl, size }

    if (!currentPositionInfo || currentPositionInfo.size === 0) {
      console.log(`   ‚úÖ [WhiteBIT] No open position found for ${tickerId}.`);
      return { message: `No open position for ${tickerId}` };
    }

    const positionSize = currentPositionInfo.size;
    // X√°c ƒë·ªãnh side ƒë·ªÉ ƒë√≥ng: n·∫øu size > 0 (Long) th√¨ c·∫ßn Sell, n·∫øu size < 0 (Short) th√¨ c·∫ßn Buy
    // WhiteBIT tr·∫£ v·ªÅ size lu√¥n d∆∞∆°ng, c·∫ßn ki·ªÉm tra side c·ªßa v·ªã th·∫ø
    // Ta c·∫ßn g·ªçi l·∫°i API positions ƒë·ªÉ l·∫•y side, ho·∫∑c l∆∞u side khi m·ªü l·ªánh
    // T·∫°m gi·∫£ ƒë·ªãnh: N·∫øu getPNL tr·∫£ v·ªÅ size != 0, ta l·∫•y l·∫°i th√¥ng tin ƒë·∫ßy ƒë·ªß
    let positionSide = '';
    try {
       const positions = await _signedRequest('/api/v4/trade-account/positions', 'POST', { market: tickerId });
       const position = positions.find(p => p.market === tickerId);
       if (position) positionSide = position.side; // 'long' or 'short'
    } catch (e) {
       throw new Error(`[WhiteBIT] Could not determine position side for ${tickerId}: ${e.message}`);
    }

    if (!positionSide) {
       throw new Error(`[WhiteBIT] Could not determine position side for active position ${tickerId}`);
    }

    const closeSide = positionSide.toLowerCase() === 'long' ? 'sell' : 'buy';
    const quantityToClose = Math.abs(positionSize); // Size lu√¥n d∆∞∆°ng tr√™n WhiteBIT

    console.log(`   -> [WhiteBIT] Closing ${quantityToClose} of ${tickerId} with side ${closeSide}`);
    
    // B∆∞·ªõc 3: ƒê·∫∑t l·ªánh Market ng∆∞·ª£c h∆∞·ªõng ƒë·ªÉ ƒë√≥ng v·ªã th·∫ø
    // WhiteBIT c√≥ th·ªÉ c√≥ endpoint ri√™ng ƒë·ªÉ ƒë√≥ng v·ªã th·∫ø ho·∫∑c d√πng market order v·ªõi c·ªù reduceOnly
    // Gi·∫£ s·ª≠ d√πng market order th√¥ng th∆∞·ªùng
    const payload = {
      market: tickerId,
      side: closeSide,
      amount: quantityToClose.toString(),
      // WhiteBIT V4 d∆∞·ªùng nh∆∞ kh√¥ng c√≥ c·ªù 'reduceOnly' cho market order
      // C·∫ßn ƒë·∫£m b·∫£o kh√¥ng c√≥ l·ªói logic n√†o khi·∫øn m·ªü th√™m v·ªã th·∫ø m·ªõi
    };
    const data = await _signedRequest('/api/v4/order/collateral/market', 'POST', payload);
    console.log(`   ‚úÖ [WhiteBIT] Close order placed for ${tickerId}.`);
    return { orderId: data?.id || data?.orderId || 'N/A' };
  }
};